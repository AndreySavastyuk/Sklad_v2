package com.example.myprinterapp.notifications

import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import javax.inject.Inject
import javax.inject.Singleton

data class NotificationMessage(
    val id: String,
    val title: String,
    val message: String,
    val type: NotificationType,
    val timestamp: Long = System.currentTimeMillis(),
    val isRead: Boolean = false,
    val operationId: String? = null,
    val partNumber: String? = null
)

enum class NotificationType {
    ERROR,      // –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏
    WARNING,    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    INFO,       // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    URGENT      // –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}

@Singleton
class NotificationManager @Inject constructor() {
    
    private val _notifications = MutableStateFlow<List<NotificationMessage>>(emptyList())
    val notifications: StateFlow<List<NotificationMessage>> = _notifications.asStateFlow()
    
    private val _unreadCount = MutableStateFlow(0)
    val unreadCount: StateFlow<Int> = _unreadCount.asStateFlow()
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—É –ü–î–û –æ–± –æ—à–∏–±–∫–µ
     */
    fun notifyEngineerAboutError(
        operationId: String,
        partNumber: String,
        errorDescription: String
    ) {
        val notification = NotificationMessage(
            id = generateId(),
            title = "üö® –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–µ–º–∫–µ",
            message = "–û–ø–µ—Ä–∞—Ü–∏—è $operationId (–∞—Ä—Ç–∏–∫—É–ª: $partNumber): $errorDescription",
            type = NotificationType.ERROR,
            operationId = operationId,
            partNumber = partNumber
        )
        
        addNotification(notification)
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –≤ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
     */
    fun notifyAboutUnclosedPositions(
        operationId: String,
        partNumber: String,
        unclosedCount: Int
    ) {
        val notification = NotificationMessage(
            id = generateId(),
            title = "‚ö†Ô∏è –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏",
            message = "–í —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞–π–¥–µ–Ω–æ $unclosedCount –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ $operationId ($partNumber)",
            type = NotificationType.WARNING,
            operationId = operationId,
            partNumber = partNumber
        )
        
        addNotification(notification)
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–µ—á–∞—Ç—å—é
     */
    fun notifyAboutPrintError(
        operationId: String,
        partNumber: String,
        printError: String
    ) {
        val notification = NotificationMessage(
            id = generateId(),
            title = "üñ®Ô∏è –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏",
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –¥–ª—è $partNumber: $printError",
            type = NotificationType.ERROR,
            operationId = operationId,
            partNumber = partNumber
        )
        
        addNotification(notification)
    }
    
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä
     */
    fun notifyDataTransferred(
        operationId: String,
        partNumber: String
    ) {
        val notification = NotificationMessage(
            id = generateId(),
            title = "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã",
            message = "–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∫–µ $partNumber —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é —Å–∏—Å—Ç–µ–º—É",
            type = NotificationType.INFO,
            operationId = operationId,
            partNumber = partNumber
        )
        
        addNotification(notification)
    }
    
    /**
     * –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
     */
    fun notifyUrgentIssue(
        title: String,
        message: String,
        operationId: String? = null
    ) {
        val notification = NotificationMessage(
            id = generateId(),
            title = "üö® $title",
            message = message,
            type = NotificationType.URGENT,
            operationId = operationId
        )
        
        addNotification(notification)
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
     */
    private fun addNotification(notification: NotificationMessage) {
        val currentList = _notifications.value.toMutableList()
        currentList.add(0, notification) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ 50
        if (currentList.size > 50) {
            currentList.removeAt(currentList.size - 1)
        }
        
        _notifications.value = currentList
        updateUnreadCount()
    }
    
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
     */
    fun markAsRead(notificationId: String) {
        val currentList = _notifications.value.toMutableList()
        val index = currentList.indexOfFirst { it.id == notificationId }
        
        if (index != -1) {
            currentList[index] = currentList[index].copy(isRead = true)
            _notifications.value = currentList
            updateUnreadCount()
        }
    }
    
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     */
    fun markAllAsRead() {
        val currentList = _notifications.value.map { it.copy(isRead = true) }
        _notifications.value = currentList
        updateUnreadCount()
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    fun removeNotification(notificationId: String) {
        val currentList = _notifications.value.toMutableList()
        currentList.removeAll { it.id == notificationId }
        _notifications.value = currentList
        updateUnreadCount()
    }
    
    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    fun clearAllNotifications() {
        _notifications.value = emptyList()
        _unreadCount.value = 0
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private fun updateUnreadCount() {
        _unreadCount.value = _notifications.value.count { !it.isRead }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
     */
    private fun generateId(): String {
        return "notif_${System.currentTimeMillis()}_${(1000..9999).random()}"
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
     */
    fun getNotificationsByType(type: NotificationType): List<NotificationMessage> {
        return _notifications.value.filter { it.type == type }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    fun getUnreadNotifications(): List<NotificationMessage> {
        return _notifications.value.filter { !it.isRead }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    fun getNotificationsByOperation(operationId: String): List<NotificationMessage> {
        return _notifications.value.filter { it.operationId == operationId }
    }
} 